!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module science ! in 
    interface  ! in :science
        module science ! in :science:science.f90
            real*8, parameter,optional :: eps1=0.6219800221014
            real*8, parameter,optional :: eps2=0.3780199778986
            real*8, parameter,optional :: trpl=273.16
            real*8, parameter,optional :: aerk1w=610.94
            real*8, parameter,optional :: aerk2w=17.625
            real*8, parameter,optional :: aerk3w=30.11
            real*8, parameter,optional :: aerk1i=611.21
            real*8, parameter,optional :: aerk2i=22.587
            real*8, parameter,optional :: aerk3i=-0.71
            real*8, parameter,optional :: aew1=6.1094
            real*8, parameter,optional :: aew2=17.625
            real*8, parameter,optional :: aew3=243.05
            real*8, parameter,optional :: aei1=6.1121
            real*8, parameter,optional :: aei2=22.587
            real*8, parameter,optional :: aei3=273.86
            function diftrpl(ttt) ! in :science:science.f90:science
                real*8 intent(in) :: ttt
                real*8 :: diftrpl
            end function diftrpl
            function fn1(ttt) ! in :science:science.f90:science
                real*8 intent(in) :: ttt
                real*8 :: fn1
            end function fn1
            function maskt(ttt) ! in :science:science.f90:science
                real*8 intent(in) :: ttt
                real*8 :: maskt
            end function maskt
            function fomults(ddd,ttt) ! in :science:science.f90:science
                real*8 intent(in) :: ddd
                real*8 intent(in) :: ttt
                real*8 :: fomults
            end function fomults
            function foewf(ttt) ! in :science:science.f90:science
                real*8 intent(in) :: ttt
                real*8 :: foewf
            end function foewf
            function foew(ttt) ! in :science:science.f90:science
                real*8 intent(in) :: ttt
                real*8 :: foew
            end function foew
            function foewaf(ttt) ! in :science:science.f90:science
                real*8 intent(in) :: ttt
                real*8 :: foewaf
            end function foewaf
            function foewa(ttt) ! in :science:science.f90:science
                real*8 intent(in) :: ttt
                real*8 :: foewa
            end function foewa
            function foqfe(eee,prs) ! in :science:science.f90:science
                real*8 intent(in) :: eee
                real*8 intent(in) :: prs
                real*8 :: foqfe
            end function foqfe
            function foefq(qqq,prs) ! in :science:science.f90:science
                real*8 intent(in) :: qqq
                real*8 intent(in) :: prs
                real*8 :: foefq
            end function foefq
            function fohr(qqq,ttt,prs) ! in :science:science.f90:science
                real*8 intent(in) :: qqq
                real*8 intent(in) :: ttt
                real*8 intent(in) :: prs
                real*8 :: fohr
            end function fohr
            function fohra(qqq,ttt,prs) ! in :science:science.f90:science
                real*8 intent(in) :: qqq
                real*8 intent(in) :: ttt
                real*8 intent(in) :: prs
                real*8 :: fohra
            end function fohra
            function shuahr(hu,tt,px,swph) ! in :science:science.f90:science
                real*8 intent(in) :: hu
                real*8 intent(in) :: tt
                real*8 intent(in) :: px
                logical intent(in) :: swph
                real*8 :: shuahr
            end function shuahr
            function sesahu(es,tt,px,swph) ! in :science:science.f90:science
                real*8 intent(in) :: es
                real*8 intent(in) :: tt
                real*8 intent(in) :: px
                logical intent(in) :: swph
                real*8 :: sesahu
            end function sesahu
            function sesahr(es,tt,px,swph) ! in :science:science.f90:science
                real*8 intent(in) :: es
                real*8 intent(in) :: tt
                real*8 intent(in) :: px
                logical intent(in) :: swph
                real*8 :: sesahr
            end function sesahr
            function shrahu(hr,tt,px,swph) ! in :science:science.f90:science
                real*8 intent(in) :: hr
                real*8 intent(in) :: tt
                real*8 intent(in) :: px
                logical intent(in) :: swph
                real*8 :: shrahu
            end function shrahu
            function shuaes(hu,tt,px,swph) ! in :science:science.f90:science
                real*8 intent(in) :: hu
                real*8 intent(in) :: tt
                real*8 intent(in) :: px
                logical intent(in) :: swph
                real*8 :: shuaes
            end function shuaes
            function shraes(hr,tt,px,swph) ! in :science:science.f90:science
                real*8 intent(in) :: hr
                real*8 intent(in) :: tt
                real*8 intent(in) :: px
                logical intent(in) :: swph
                real*8 :: shraes
            end function shraes
            function svp_water_from_tt(tt) ! in :science:science.f90:science
                real*8 intent(in) :: tt
                real*8 :: svp_water_from_tt
            end function svp_water_from_tt
            function svp_ice_from_tt(tt) ! in :science:science.f90:science
                real*8 intent(in) :: tt
                real*8 :: svp_ice_from_tt
            end function svp_ice_from_tt
            subroutine svp_from_tt(tt,ni,nj,tpl,swph,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                real*8 intent(in) :: tpl
                logical intent(in) :: swph
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine svp_from_tt
            function rpn_svp_water(tt) ! in :science:science.f90:science
                real*8 intent(in) :: tt
                real*8 :: rpn_svp_water
            end function rpn_svp_water
            function rpn_svp_ice(tt) ! in :science:science.f90:science
                real*8 intent(in) :: tt
                real*8 :: rpn_svp_ice
            end function rpn_svp_ice
            subroutine rpn_svp(tt,ni,nj,tpl,swph,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                real*8 intent(in) :: tpl
                logical intent(in) :: swph
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine rpn_svp
            subroutine vppr_from_hr(hr,svp,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: hr
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: svp
                integer, optional,intent(in),check(shape(hr,0)==ni),depend(hr) :: ni=shape(hr,0)
                integer, optional,intent(in),check(shape(hr,1)==nj),depend(hr) :: nj=shape(hr,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine vppr_from_hr
            subroutine vppr_from_hu(hu,px,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: hu
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: px
                integer, optional,intent(in),check(shape(hu,0)==ni),depend(hu) :: ni=shape(hu,0)
                integer, optional,intent(in),check(shape(hu,1)==nj),depend(hu) :: nj=shape(hu,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine vppr_from_hu
            subroutine vppr_from_qv(qv,px,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: qv
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: px
                integer, optional,intent(in),check(shape(qv,0)==ni),depend(qv) :: ni=shape(qv,0)
                integer, optional,intent(in),check(shape(qv,1)==nj),depend(qv) :: nj=shape(qv,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine vppr_from_qv
            function vppr_water_td(td) ! in :science:science.f90:science
                real*8 intent(in) :: td
                real*8 :: vppr_water_td
            end function vppr_water_td
            function vppr_ice_td(td) ! in :science:science.f90:science
                real*8 intent(in) :: td
                real*8 :: vppr_ice_td
            end function vppr_ice_td
            subroutine vppr_from_td(td,tt,ni,nj,tpl,swph,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: td
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: tt
                integer, optional,intent(in),check(shape(td,0)==ni),depend(td) :: ni=shape(td,0)
                integer, optional,intent(in),check(shape(td,1)==nj),depend(td) :: nj=shape(td,1)
                real*8 intent(in) :: tpl
                logical intent(in) :: swph
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine vppr_from_td
            subroutine rpn_vppr_from_hu(hu,px,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: hu
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: px
                integer, optional,intent(in),check(shape(hu,0)==ni),depend(hu) :: ni=shape(hu,0)
                integer, optional,intent(in),check(shape(hu,1)==nj),depend(hu) :: nj=shape(hu,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine rpn_vppr_from_hu
            function rpn_vppr_water_from_td(td) ! in :science:science.f90:science
                real*8 intent(in) :: td
                real*8 :: rpn_vppr_water_from_td
            end function rpn_vppr_water_from_td
            function rpn_vppr_ice_from_td(td) ! in :science:science.f90:science
                real*8 intent(in) :: td
                real*8 :: rpn_vppr_ice_from_td
            end function rpn_vppr_ice_from_td
            subroutine rpn_vppr_from_td(td,tt,ni,nj,tpl,swph,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: td
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: tt
                integer, optional,intent(in),check(shape(td,0)==ni),depend(td) :: ni=shape(td,0)
                integer, optional,intent(in),check(shape(td,1)==nj),depend(td) :: nj=shape(td,1)
                real*8 intent(in) :: tpl
                logical intent(in) :: swph
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine rpn_vppr_from_td
            subroutine td_from_es(tt,es,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: es
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine td_from_es
            function td_water_from_vppr(vppr) ! in :science:science.f90:science
                real*8 intent(in) :: vppr
                real*8 :: td_water_from_vppr
            end function td_water_from_vppr
            function td_ice_from_vppr(vppr) ! in :science:science.f90:science
                real*8 intent(in) :: vppr
                real*8 :: td_ice_from_vppr
            end function td_ice_from_vppr
            subroutine td_from_vppr(tt,vppr,ni,nj,tpl,swph,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: vppr
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                real*8 intent(in) :: tpl
                logical intent(in) :: swph
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine td_from_vppr
            subroutine rpn_hu_from_hr(tt,hr,px,ni,nj,swph,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: hr
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: px
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                logical intent(in) :: swph
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine rpn_hu_from_hr
            subroutine rpn_es_from_hr(tt,hr,px,ni,nj,swph,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: hr
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: px
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                logical intent(in) :: swph
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine rpn_es_from_hr
            subroutine rpn_es_from_hu(tt,hu,px,ni,nj,swph,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: hu
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: px
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                logical intent(in) :: swph
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine rpn_es_from_hu
            subroutine hu_from_qv(qv,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: qv
                integer, optional,intent(in),check(shape(qv,0)==ni),depend(qv) :: ni=shape(qv,0)
                integer, optional,intent(in),check(shape(qv,1)==nj),depend(qv) :: nj=shape(qv,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine hu_from_qv
            subroutine td_from_hr(tt,hr,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: hr
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine td_from_hr
            subroutine hr_from_svp_vppr(svp,vppr,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: svp
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: vppr
                integer, optional,intent(in),check(shape(svp,0)==ni),depend(svp) :: ni=shape(svp,0)
                integer, optional,intent(in),check(shape(svp,1)==nj),depend(svp) :: nj=shape(svp,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine hr_from_svp_vppr
            subroutine rpn_hr_from_es(tt,es,px,ni,nj,swph,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: es
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: px
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                logical intent(in) :: swph
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine rpn_hr_from_es
            subroutine rpn_hr_from_hu(tt,hu,px,ni,nj,swph,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: hu
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: px
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                logical intent(in) :: swph
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine rpn_hr_from_hu
            subroutine hu_from_vppr(vppr,px,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: vppr
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: px
                integer, optional,intent(in),check(shape(vppr,0)==ni),depend(vppr) :: ni=shape(vppr,0)
                integer, optional,intent(in),check(shape(vppr,1)==nj),depend(vppr) :: nj=shape(vppr,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine hu_from_vppr
            subroutine rpn_hu_from_es(tt,es,px,ni,nj,swph,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: es
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: px
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                logical intent(in) :: swph
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine rpn_hu_from_es
            subroutine hmx_from_svp(tt,svp,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: svp
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine hmx_from_svp
            subroutine qv_from_hu(hu,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: hu
                integer, optional,intent(in),check(shape(hu,0)==ni),depend(hu) :: ni=shape(hu,0)
                integer, optional,intent(in),check(shape(hu,1)==nj),depend(hu) :: nj=shape(hu,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine qv_from_hu
            subroutine qv_from_vppr(vppr,px,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: vppr
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: px
                integer, optional,intent(in),check(shape(vppr,0)==ni),depend(vppr) :: ni=shape(vppr,0)
                integer, optional,intent(in),check(shape(vppr,1)==nj),depend(vppr) :: nj=shape(vppr,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine qv_from_vppr
            subroutine es_from_td(tt,td,ni,nj,res) ! in :science:science.f90:science
                real*8 dimension(ni,nj),intent(in) :: tt
                real*8 dimension(ni,nj),intent(in),depend(ni,nj) :: td
                integer, optional,intent(in),check(shape(tt,0)==ni),depend(tt) :: ni=shape(tt,0)
                integer, optional,intent(in),check(shape(tt,1)==nj),depend(tt) :: nj=shape(tt,1)
                real*8 dimension(ni,nj),intent(out),depend(ni,nj) :: res
            end subroutine es_from_td
        end module science
    end interface 
end python module science

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
